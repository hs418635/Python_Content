Python Test Paper with Answers

Time Limit: 1 hour 30 minutes

Instructions:
- Answer all questions.
- Write your code neatly and clearly.
- Ensure you read each question carefully before attempting to answer.

---

Section A: Theory Questions

1. Operators
   - What are operators in Python? List and explain different types of operators with examples.
     - Answer:
       Operators are special symbols in Python that perform operations on variables and values. 
       - Arithmetic Operators: +, -, *, /, %, **, //
         - Example: 3 + 2 = 5
       - Comparison Operators: ==, !=, >, <, >=, <=
         - Example: 3 > 2 is True
       - Logical Operators: and, or, not
         - Example: True and False is False
       - Assignment/compound Operators: =, +=, -=, *=, /=
         - Example: x += 1 is equivalent to x = x + 1
       - Membership Operators: in, not in
         - Example: 'a' in 'apple' is True
       - Identity Operators: is, is not
         - Example: a is b checks if a and b are the same object

2. Conditional Statements
   - Explain the use of if, elif, and else statements in Python with an example.
     - Answer:
       if, elif, and else statements are used for decision making in Python.
       ```python
       x = 10
       if x > 0:
           print("x is positive")
       elif x < 0:
           print("x is negative")
       else:
           print("x is zero")
       ```

3. Loops
   - Differentiate between for loop and while loop in Python. Provide an example for each.
     - Answer:
       A for loop iterates over a sequence (like a list, tuple, or string).
       ```python
       for i in range(5):
           print(i)
       ```
       A while loop repeats as long as a condition is true.
       ```python
       i = 0
       while i < 5:
           print(i)
           i += 1
       ```

4. Functions
   - What are functions in Python? Explain the difference between built-in functions and user-defined functions with examples.
     - Answer:
       Functions are blocks of reusable code that perform a specific task. 
       - Built-in Functions: Provided by Python. Example: print(), len()
       - User-defined Functions: Defined by the user. Example:
         ```python
         def greet(name):
             return f"Hello, {name}"
         ```

5. Error and Exception Handling
   - What is the purpose of error and exception handling in Python? Explain the use of try, except, finally, and raise with examples.
     - Answer:
       Error and exception handling manage runtime errors, allowing the program to continue or fail gracefully.
       ```python
       try:
           x = 1 / 0
       except ZeroDivisionError:
           print("Cannot divide by zero")
       finally:
           print("This runs no matter what")
       ```

6. Object-Oriented Programming
   - What are the basic principles of Object-Oriented Programming (OOP)? Explain each principle briefly.
     - Answer:
       - Encapsulation: Bundling data and methods that operate on the data within one unit (class).
       - Abstraction: Hiding complex implementation details and showing only the necessary features.
       - Inheritance: Creating a new class using the properties and methods of an existing class.
       - Polymorphism: Allowing methods to do different things based on the object it is acting upon.

---

Section B: Coding Questions

1. Operators
   - Write a Python program to swap two numbers without using a temporary variable.
     - Answer:
       ```python
       a = 5
       b = 3
       a, b = b, a
       print(a, b)  # Output: 3 5
       ```

2. Conditional Statements
   - Write a Python program that takes an integer input from the user and prints whether it is even or odd.
     - Answer:
       ```python
       num = int(input("Enter a number: "))
       if num % 2 == 0:
           print("Even")
       else:
           print("Odd")
       ```

3. While Loop
   - Write a Python program to print the first 10 natural numbers using a while loop.
     - Answer:
       ```python
       i = 1
       while i <= 10:
           print(i)
           i += 1
       ```

4. For Loop
   - Write a Python program to print the multiplication table of a given number using a for loop.
     - Answer:
       ```python
       num = int(input("Enter a number: "))
       for i in range(1, 11):
           print(f"{num} x {i} = {num * i}")
       ```

5. Functions
   - Write a Python function that takes two numbers as arguments and returns their sum.
     - Answer:
       ```python
       def add(a, b):
           return a + b
       ```

6. args and kwargs
   - Write a Python function that accepts any number of positional and keyword arguments and prints them.
     - Answer:
       ```python
       def print_args_kwargs(*args, **kwargs):
           print("Positional arguments:", args)
           print("Keyword arguments:", kwargs)
       ```

7. Global and Local Scope
   - Write a Python program that demonstrates the difference between global and local variables.
     - Answer:
       ```python
       x = "global"

       def my_func():
           x = "local"
           print("Inside function:", x)

       my_func()
       print("Outside function:", x)
       ```

8. Error and Exception Handling
   - Write a Python program that handles the ZeroDivisionError exception.
     - Answer:
       ```python
       try:
           result = 10 / 0
       except ZeroDivisionError:
           print("Cannot divide by zero")
       ```

9. Object-Oriented Programming (OOP)
   - Define a class Person with attributes name and age. Create an instance of the class and print the attributes.
     - Answer:
       ```python
       class Person:
           def __init__(self, name, age):
               self.name = name
               self.age = age

       person = Person("John", 30)
       print(person.name)
       print(person.age)
       ```

---

Section C: Practical Implementation

1. Conditional Statements and Loops
   - Write a Python program that prints all the prime numbers between 1 and 50.
     - Answer:
       ```python
       def is_prime(num):
           if num < 2:
               return False
           for i in range(2, num):
               if num % i == 0:
                   return False
           return True

       for num in range(1, 51):
           if is_prime(num):
               print(num)
       ```

2. Functions and Scope
   - Write a Python function to calculate the factorial of a number. Demonstrate the use of both global and local variables within the function.
     - Answer:
       ```python
       result = 1

       def factorial(n):
           global result
           if n == 0:
               return 1
           else:
               result *= n
               return factorial(n-1)

       num = 5
       factorial(num)
       print(f"Factorial of {num} is {result}")
       ```

3. Error and Exception Handling with Custom Exceptions
   - Write a Python program that defines a custom exception NegativeNumberError. The program should raise this exception if the user inputs a negative number when asked to enter a positive integer.
     - Answer:
       ```python
       class NegativeNumberError(Exception):
           pass

       num = int(input("Enter a positive integer: "))

       if num < 0:
           raise NegativeNumberError("Negative number entered!")
       else:
           print("Positive number entered:", num)
       ```

4. Object-Oriented Programming (OOP)
   - Define a class Rectangle with attributes length and width. Include methods to calculate the area and perimeter of the rectangle. Create an instance of the class and display the area and perimeter.
     - Answer:
       ```python
       class Rectangle:
           def __init__(self, length, width):
               self.length = length
               self.width = width

           def area(self):
               return self.length * self.width

           def perimeter(self):
               return 2 * (self.length + self.width)

       rect = Rectangle(4, 5)
       print("Area:", rect.area())
       print("Perimeter:", rect.perimeter())
       ```

---

End of Paper

Encapsulation
Encapsulation Practice 1:
Write a Python class BankAccount that encapsulates the balance of an account. The class should include methods to deposit and withdraw money, but the balance should not be directly accessible from outside the class. Demonstrate how to create an instance of the class, deposit some money, and then withdraw some money.

Encapsulation Practice 2:
Create a class Student that has private attributes for name and grade. Provide public methods to set and get these attributes. Write a program to create a Student object, set its attributes, and then print them using the getter methods.

Encapsulation Practice 3:
Implement a class Car with a private attribute speed. Include methods to set and get the speed, but ensure that the speed cannot be set to a negative value. Test your class by creating an instance and trying to set different speed values, including a negative one.

Single Inheritance
Single Inheritance Practice:
Write a Python program to demonstrate single inheritance. Create a base class Person with attributes name and age, and a derived class Employee that adds an attribute employee_id. Create an instance of Employee and show how it can access both its own attributes and those of the Person class.

Multiple Inheritance
Multiple Inheritance Practice:
Write a Python program to demonstrate multiple inheritance. Create three classes: Base1 with an attribute attr1, Base2 with an attribute attr2, and a derived class Derived that inherits from both Base1 and Base2. Show how an instance of Derived can access attributes from both base classes.

Hierarchical Inheritance
Hierarchical Inheritance Practice:
Write a Python program to demonstrate hierarchical inheritance. Create a base class Animal with a method speak(). Then create two derived classes Dog and Cat, each overriding the speak() method. Instantiate objects of Dog and Cat and call their speak() methods to demonstrate hierarchical inheritance.

Multilevel Inheritance
Multilevel Inheritance Practice:
Write a Python program to demonstrate multilevel inheritance. Create a base class Grandparent with a method grandparent_method(), a derived class Parent that inherits from Grandparent and adds a method parent_method(), and a derived class Child that inherits from Parent and adds a method child_method(). Create an instance of Child and show how it can access methods from all three classes.